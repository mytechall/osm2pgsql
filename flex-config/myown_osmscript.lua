---
--- Generated by Luanalysis
--- Created by mymac.
--- DateTime: 2023/3/23 15:08

print('osm2pgsql version: ' .. osm2pgsql.version)

-- 定义数据库连接参数
local database_config = {
    host = "localhost",
    port = "5432",
    database = "osm",
    user = "osm",
    password = "osm"
}

-- 定义osm2pgsql参数
local osm2pgsql_config = {
    style = "/Users/mymac/workspaces/web_related/osm2pgsql/flex-config/myown_osmscript.lua",
    database = database_config,
    output = "flex",
    prefix = "osm",
    multipolygon = true,
    hstore = true
}

local  node_data = osm2pgsql.define_table({
    name = "node_data",
    ids = {type = 'node', id_column ='node_id'},
    columns = {
        {column = 'name', type = 'text'},
        {column = 'tags', type = 'jsonb'},
        {column = 'lat', sql_type = 'numeric'},
        {column = 'lon', sql_type = 'numeric'},
        {column ='version', type = 'int'},
        {column = 'timestamp', sql_type = 'timestamp'},
        {column = 'changeset', type = 'int'},
        {column = 'uid', type = 'int'},
        {column = 'user', type = 'text'},
        {column = 'visible', type = 'bool'}},
    schema = 'first_schema'
    }
)

local  way_data = osm2pgsql.define_table({
    name = "way_data",
    ids = {type = 'way', id_column = 'way_id'},
    columns = {
        { column = 'name', type = 'text' },
        { column = 'tags', type = 'jsonb' },
        { column = 'nds', type = 'jsonb' },
        { column = 'version', type = 'int' },
        { column = 'timestamp', sql_type = 'timestamp' },
        { column = 'changeset', type = 'int' }
    },
    schema = 'first_schema'
})

local relation_data = osm2pgsql.define_table({
    name = "relation_data",
    ids = {type ='relation', id_column ='relation_id'},
    columns = {
        {column = 'name', type = 'text'},
        {column = 'tags', type = 'jsonb'},
        {column ='members', type = 'jsonb'},
        {column ='version', type = 'int'},
        {column = 'timestamp', sql_type = 'timestamp'},
        {column = 'changeset', type = 'int'},
        {column = 'uid', type = 'int'},
        {column = 'user', type = 'text'},
        {column = 'visible', type = 'bool'}
    },
    schema = 'first_schema'
})

osm2pgsql.define_table({
    name = "area_data",
    ids = {type = 'area', id_column = 'area_id'},
    columns = {
        { column = 'name', type = 'text' },
        { column = 'tags', type = 'jsonb' },
        { column = 'geom', type = 'geometry', projection = 4326 },
        { column = 'version', type = 'int' },
        { column = 'timestamp', sql_type = 'timestamp' },
        { column = 'changeset', type = 'int' },
        { column = 'uid', type = 'int' },
        { column = 'user', type = 'text' },
        { column = 'visible', type = 'bool' }
    },
    schema = 'first_schema'
    }
)

function osm2pgsql.process_node(object)
    for i = 1, 10 do
        if is_empty(object.tags) then
            return
        end
        print(object)
    end
end


