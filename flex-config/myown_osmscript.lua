---
--- Generated by Luanalysis
--- Created by mymac.
--- DateTime: 2023/3/23 15:08
--- command line :
--- osm2pgsql -H localhost -P 5432 -d "dbname=osm user=osm password=osm options=--search_path=first_schema" --drop --log-level=debug --create hstore --slim --multi-geometry -O flex -S myown_osmscript.lua -r pbf '/Users/mymac/allDatas/osmdata/china-latest-20230223.osm.pbf'


print('osm2pgsql version: ' .. osm2pgsql.version)

-- 定义数据库连接参数
local database_config = {
    host = "localhost",
    port = "5432",
    database = "osm",
    user = "osm",
    password = "osm"
}

-- 定义osm2pgsql参数
local osm2pgsql_config = {
    style = "/Users/mymac/workspaces/web_related/osm2pgsql/flex-config/myown_osmscript.lua",
    database = database_config,
    output = "flex",
    prefix = "osm",
    multipolygon = true,
    hstore = true
}

local  node_data = osm2pgsql.define_table({
    name = "node_data",
    ids = {type = 'node', id_column ='node_id'},
    columns = {
        {column = 'name', type = 'text'},
        {column = 'tags', type = 'jsonb'},
        {column = 'lat', sql_type = 'numeric', not_null = true},
        {column = 'lon', sql_type = 'numeric', not_null = true},
        {column ='version', type = 'int'},
        {column = 'timestamp', sql_type = 'timestamp'},
        {column = 'changeset', type = 'int'},
        {column = 'uid', type = 'int'},
        {column = 'user', type = 'text'},
        {column = 'visible', type = 'bool'}},
    schema = 'first_schema'
    }
)

--local  way_data = osm2pgsql.define_table({
--    name = "way_data",
--    ids = {type = 'way', id_column = 'way_id'},
--    columns = {
--        { column = 'name', type = 'text' },
--        { column = 'tags', type = 'jsonb' },
--        { column = 'nds', type = 'jsonb' },
--        { column = 'version', type = 'int' },
--        { column = 'timestamp', sql_type = 'timestamp' },
--        { column = 'changeset', type = 'int' }
--    },
--    schema = 'first_schema'
--})

--local relation_data = osm2pgsql.define_table({
--    name = "relation_data",
--    ids = {type ='relation', id_column ='relation_id'},
--    columns = {
--        {column = 'name', type = 'text'},
--        {column = 'tags', type = 'jsonb'},
--        {column ='members', type = 'jsonb'},
--        {column ='version', type = 'int'},
--        {column = 'timestamp', sql_type = 'timestamp'},
--        {column = 'changeset', type = 'int'},
--        {column = 'uid', type = 'int'},
--        {column = 'user', type = 'text'},
--        {column = 'visible', type = 'bool'}
--    },
--    schema = 'first_schema'
--})

--local area_data = osm2pgsql.define_table({
--    name = "area_data",
--    ids = {type = 'area', id_column = 'area_id'},
--    columns = {
--        { column = 'name', type = 'text' },
--        { column = 'tags', type = 'jsonb' },
--        { column = 'geom', type = 'geometry', projection = 4326 },
--        { column = 'version', type = 'int' },
--        { column = 'timestamp', sql_type = 'timestamp' },
--        { column = 'changeset', type = 'int' },
--        { column = 'uid', type = 'int' },
--        { column = 'user', type = 'text' },
--        { column = 'visible', type = 'bool' }
--    },
--    schema = 'first_schema'
--    }
--)

print('tables creation done')

-- processing OSM data

local processed_nodes = 0  -- 记录处理的节点数量

print('start to process osm data')


function osm2pgsql.process_node(object)
    -- 如果已经处理了10个节点，则退出
    if processed_nodes >= 10 then
        return
    end

    -- 提取节点数据
    local node_id = object.id
    print(object.id)
    local tags = object.tags
    local lat = object.lat
    local lon = object.lon
    local version = object.version
    local timestamp = object.timestamp
    local changeset = object.changeset
    local uid = object.uid
    local user = object.user
    local visible = object.visible

    -- 打印节点数据
    print("Processing node:", node_id, tags, lat, lon, version, timestamp, changeset, uid, user, visible)

    -- 插入节点数据到数据库中
    node_data:insert({
        node_id = node_id,
        name = tags.name,
        tags = tags,
        lat = lat,
        lon = lon,
        version = version,
        timestamp = timestamp,
        changeset = changeset,
        uid = uid,
        user = user,
        visible = visible
    })

    processed_nodes = processed_nodes + 1  -- 增加已处理节点数量
end



